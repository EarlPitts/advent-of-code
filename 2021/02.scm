(define (proc data)
  (define (iter rest depth forward)
    (if (null? rest) (cons depth forward)
      (let ((command (car rest)) (amount (cadr rest)))
        (cond ((eq? command 'forward)
               (iter (cddr rest) depth (+ forward amount)))
              ((eq? command 'down)
               (iter (cddr rest) (+ depth amount) forward))
              ((eq? command 'up)
               (iter (cddr rest) (- depth amount) forward))))))
  (iter data 0 0))

(* (car (proc data)) (cdr (proc data)))

(define (proc data)
  (define (iter rest depth forward aim)
    (if (null? rest) (cons depth forward)
      (let ((command (car rest)) (amount (cadr rest)))
        (cond ((eq? command 'forward)
               (iter (cddr rest) (+ depth (* aim amount)) (+ forward amount) aim))
              ((eq? command 'down)
               (iter (cddr rest) depth forward (+ aim amount)))
              ((eq? command 'up)
               (iter (cddr rest) depth forward (- aim amount)))))))
  (iter data 0 0 0))

(* (car (proc data)) (cdr (proc data)))
