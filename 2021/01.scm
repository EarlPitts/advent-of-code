(define (bigger l)
  (define (bigger-iter rest count)
    (cond ((null? (cdr rest)) count)
          ((< (car rest) (cadr rest)) (bigger-iter (cdr rest) (+ 1 count)))
          (else (bigger-iter (cdr rest) count))))
  (bigger-iter l 0))

(define (sum-three l)
  (if (null? (cddr l))
    '()
    (cons (+ (car l) (cadr l) (caddr l))
          (sum-three (cdr l)))))

(bigger data)
(bigger (sum-three data))
